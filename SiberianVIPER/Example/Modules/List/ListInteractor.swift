//
//  ListInteractor.swift
//  SiberianVIPER
//
//  Created by Sergey Petrachkov on 25/12/2017.
//  Copyright (c) 2017 Sergey Petrachkov. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit
import SiberianVIPER
protocol ListInteractorInput: class {
  var output : ListInteractorOutput? { get set }
  func requestItems(request: List.DataContext.Request)
  init(service: ListServiceProtocol)
}

protocol ListInteractorOutput: class {
  func didReceive(response: List.DataContext.Response)
  func didFail(with error: Error)
}

protocol ListModuleMapperProtocol: CollectionModuleMapper {
  func map(item: EntityType) -> ViewModelType
  func map(digit: Int) -> Double
}
class ListModuleMapper: ListModuleMapperProtocol {
  func map(item: Item) -> ListItemModel {
    return ListItemModel(currentModel: item)
  }
  
  func map(digit: Int) -> Double {
    return Double(digit)
  }
  
  func map(items: [Item]) -> [ListItemModel] {
    return items.map( {ListItemModel(currentModel: $0)} )
  }
  typealias EntityType = Item
  
  typealias ViewModelType = ListItemModel
  
}
class ListInteractor: ListInteractorInput {
  let service: ListServiceProtocol!
  let mapper: ListModuleMapper = ListModuleMapper()
  weak var output: ListInteractorOutput?
  required init(service: ListServiceProtocol) {
    self.service = service
  }
  // MARK: Do something
  func requestItems(request: List.DataContext.Request) {
    self.service.getItems(request: request,
                          success: { items in
                            let models = self.mapper.map(items: items)
                            self.output?.didReceive(response: List.DataContext.Response(originalRequest: request,
                                                                                        items: models))
    },
                          failure: { error in
                            self.output?.didFail(with: error)
    })
  }
}
