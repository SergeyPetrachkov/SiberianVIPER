//
//  ListPresenter.swift
//  SiberianVIPER
//
//  Created by Sergey Petrachkov on 25/12/2017.
//  Copyright (c) 2017 Sergey Petrachkov. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit
import SiberianVIPER

protocol ListPresenterInput: Awaitable, Startable, CloseableModule {
  var view: UIViewController! { get set }
  var output: ListPresenterOutput? { get set }
  var router : ListRoutingLogic? { get set }
  var interactor : ListInteractorInput? { get set }
  func presentSomething()
}
protocol ListPresenterOutput: AwaitableDelegate {
  func didChangeState(viewModel : List.DataContext.ViewModel)
}

class ListPresenter: CollectionPresenter, ListPresenterInput {
  func presentSomething() {
    
  }
  
  // MARK: - Essentials
  weak var view: UIViewController!
  weak var output : ListPresenterOutput?
  var viewModel: List.DataContext.ViewModel! {
    didSet {
      self.awaitableModel = self.viewModel
    }
  }
  var router : ListRoutingLogic?
  var interactor : ListInteractorInput?
  // MARK: - Initializers
  override init() {
    super.init()
    self.viewModel = List.DataContext.ViewModel()
  }
  deinit {
    print("ListPresenter deinit is called")
  }
  // MARK: - Presenter Input
  override func start() {
    super.start()
    self.awaitableDelegate = self.output
    self.awaitableModel = self.viewModel
    self.fetchItems(reset: true)
  }
  @discardableResult override func fetchItems(reset: Bool) -> (skip: Int, take: Int) {
    let skipTake = super.fetchItems(reset: reset)
    
    return skipTake
  }
}
extension ListPresenter : ListInteractorOutput {
  // MARK: - Interactor output
  func didReceive(some data: Any) {
    // Process it and act accordingly like:
    // self.output?.didChangeState(viewModel : )
  }
  func didFail(with error: Error) {
//    self.router.showError(error: error)
  }
}
