//
//  ListService.swift
//  SiberianVIPER
//
//  Created by Sergey Petrachkov on 25/12/2017.
//  Copyright (c) 2017 Sergey Petrachkov. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects.
//

import UIKit
import SiberianVIPER
protocol ListServiceProtocol: class {
  var errorReporter: ErrorReporter? { get }
  func getItems(request: List.DataContext.Request,
                   success: @escaping ([Item]) -> Void,
                   failure: @escaping (Error) -> Void)
  
  init(reporter: ErrorReporter?)
}

class ListService: ListServiceProtocol {
  required init(reporter: ErrorReporter?) {
    self.errorReporter = reporter
  }
  
  fileprivate(set) var errorReporter: ErrorReporter?
  
  func getItems(request: List.DataContext.Request,
                success: @escaping ([Item]) -> Void,
                failure: @escaping (Error) -> Void) {
    DispatchQueue.main.asyncAfter(deadline: .now() + 3,
                                  execute: {
                                    success([Item(textContent: String.randomString(length: 16), number: Int(arc4random_uniform(1024))),
                                             Item(textContent: String.randomString(length: 16), number: Int(arc4random_uniform(1024))),
                                             Item(textContent: String.randomString(length: 16), number: Int(arc4random_uniform(1024))),
                                             Item(textContent: String.randomString(length: 16), number: Int(arc4random_uniform(1024))),
                                             Item(textContent: String.randomString(length: 16), number: Int(arc4random_uniform(1024))),
                                             Item(textContent: String.randomString(length: 16), number: Int(arc4random_uniform(1024)))])
    })
  }
}
