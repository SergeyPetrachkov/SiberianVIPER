//
//  WelcomePresenter.swift
//  SiberianVIPER
//
//  Created by Sergey Petrachkov on 13/12/2017.
//  Copyright (c) 2017 Sergey Petrachkov. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit
import SiberianVIPER

protocol WelcomePresenterInput: AwaitablePresenter, Startable, CloseableModule {
  var view: UIViewController! { get set }
  var output: WelcomePresenterOutput? { get set }
  var router : WelcomeRoutingLogic? { get set }
  var interactor : WelcomeInteractorInput? { get set }
  func presentSomething()
}
protocol WelcomePresenterOutput: AwaitableOutput {
  func didChangeState(viewModel : Welcome.DataContext.ViewModel)
}

class WelcomePresenter: SiberianPresenter, WelcomePresenterInput {
  // MARK: - Essentials
  weak var view: UIViewController!
  weak var output : WelcomePresenterOutput?
  var viewModel : Welcome.DataContext.ViewModel
  var router : WelcomeRoutingLogic?
  var interactor : WelcomeInteractorInput?
  // MARK: - Initializers
  override init() {
    self.viewModel = Welcome.DataContext.ViewModel()
    super.init()
  }
  deinit {
    print("WelcomePresenter deinit is called")
  }
  // MARK: - Presenter Input
  func presentSomething() {
    self.enterPendingState(visible: true, blocking: true)
    DispatchQueue.main.asyncAfter(deadline: .now() + 2, execute: {
      self.output?.didChangeState(viewModel: self.viewModel)
    })
  }
  
  func enterPendingState(visible: Bool, blocking: Bool) {
    super.enterPendingState(visible: visible, blocking: blocking)
    self.viewModel.isBusy = true
  }
  
  func exitPendingState() {
    super.exitPendingState()
    self.viewModel.isBusy = false
  }
  
  override func start() {
    super.start()
    self.awaitableOutput = self.output
  }
}
extension WelcomePresenter : WelcomeInteractorOutput {
  // MARK: - Interactor output
  func didReceive(some data: Any) {
    // Process it and act accordingly like:
    // self.output?.didChangeState(viewModel : )
  }
  func didFail(with error: Error) {
//    self.router.showError(error: error)
  }
}
